name: Destroy Infrastructure

on:
  workflow_dispatch:  

jobs:
  destroy_infrastructure:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        layer: [network, database, compute]

    env:  
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      ORGANIZATION: ${{ secrets.ORGANIZATION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}     
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Verify Terraform Installation
        run: terraform --version

      - name: Run Terraform Init for ${{ matrix.layer }}
        run: |
          cd terraform/${{ matrix.layer }}
          terraform init \
          -reconfigure \
          -input=false \
          -backend=true \
          -backend-config="bucket=${AWS_ACCOUNT_ID}-tf-state" \
          -backend-config="region=${AWS_REGION}" \
          -backend-config="key=terraform.${ORGANIZATION}_${{ matrix.layer }}.tfstate" \
          -backend-config="encrypt=true" \
          -backend-config="dynamodb_table=${AWS_ACCOUNT_ID}-tf-locks"

      - name: Run Terraform Destroy Script for ${{ matrix.layer }}
        run: |
          cd terraform/${{ matrix.layer }}
          if [[ "${{ matrix.layer }}" == "network" ]]; then

            echo "Destroying ${{ matrix.layer }} layer..."
            terraform destroy -auto-approve \
              -input=false \
              -lock=true \
              -var "aws_access_key_id=${AWS_ACCESS_KEY_ID}" \
              -var "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" \
              -var "region=${AWS_REGION}" \
              -var "main_organization=${ORGANIZATION}"

          elif [[ "${{ matrix.layer }}" == "database" ]]; then

            echo "Destroying ${{ matrix.layer }} layer..."
            terraform destroy -auto-approve \
              -input=false \
              -lock=true \
              -var "aws_access_key_id=${AWS_ACCESS_KEY_ID}" \
              -var "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" \
              -var "region=${AWS_REGION}" \
              -var "account_id=${AWS_ACCOUNT_ID}" \
              -var "db_username=${DB_USERNAME}" \
              -var "db_password=${DB_PASSWORD}" \
              -var "main_organization=${ORGANIZATION}"

          elif [[ "${{ matrix.layer }}" == "compute" ]]; then

            echo "Destroying ${{ matrix.layer }} layer..."
            terraform destroy -auto-approve \
              -input=false \
              -lock=true \
              -var "aws_access_key_id=${AWS_ACCESS_KEY_ID}" \
              -var "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" \
              -var "region=${AWS_REGION}" \
              -var "account_id=${AWS_ACCOUNT_ID}" \
              -var "main_organization=${ORGANIZATION}"

          else
            echo "Unknown layer: ${{ matrix.layer }}"

          fi