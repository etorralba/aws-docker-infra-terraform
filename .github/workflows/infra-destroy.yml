name: Destroy Infrastructure

on:
  workflow_dispatch:

jobs:
  destroy_infrastructure:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, prod]

    env:  
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      ORGANIZATION: ${{ secrets.ORGANIZATION }}
      AWS_PAGER: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Update AWS CLI (if needed)
        run: |
          if aws --version; then
            echo "AWS CLI is already installed. Updating..."
          else
            echo "AWS CLI not found. Installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}     
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}  
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Verify Terraform Installation
        run: terraform --version

      - name: Run Terraform Destroy for all layers sequentially
        run: |
          # Define the layers in the correct order for destruction
          LAYERS=("compute" "database" "network")

          for LAYER in "${LAYERS[@]}"; do
            echo "Destroying layer: $LAYER for environment: ${{ matrix.environment }}"

            cd terraform/$LAYER

            echo "Initializing Terraform for $LAYER layer..."
            terraform init \
              -reconfigure \
              -input=false \
              -backend=true \
              -backend-config="bucket=${AWS_ACCOUNT_ID}-tf-state" \
              -backend-config="region=${AWS_REGION}" \
              -backend-config="key=terraform.${ORGANIZATION}_${LAYER}.tfstate" \
              -backend-config="encrypt=true" \
              -backend-config="dynamodb_table=${AWS_ACCOUNT_ID}-tf-locks"

            echo "Destroying Terraform resources for $LAYER layer..."
            if [[ "$LAYER" == "network" ]]; then
              terraform destroy -auto-approve \
                -input=false \
                -lock=true \
                -var "aws_access_key_id=${AWS_ACCESS_KEY_ID}" \
                -var "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" \
                -var "region=${AWS_REGION}" \
                -var "main_organization=${ORGANIZATION}" \
                -var "environment=${{ matrix.environment }}"
            elif [[ "$LAYER" == "database" ]]; then
              terraform workspace select "${{ matrix.environment }}" || terraform workspace new "${{ matrix.environment }}"
              terraform destroy -auto-approve \
                -input=false \
                -lock=true \
                -var "aws_access_key_id=${AWS_ACCESS_KEY_ID}" \
                -var "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" \
                -var "region=${AWS_REGION}" \
                -var "account_id=${AWS_ACCOUNT_ID}" \
                -var "db_username=${DB_USERNAME}" \
                -var "db_password=${DB_PASSWORD}" \
                -var "main_organization=${ORGANIZATION}" \
                -var "environment=${{ matrix.environment }}"
            elif [[ "$LAYER" == "compute" ]]; then
              # List all ECR repositories
              REPOSITORIES=$(aws ecr describe-repositories --query "repositories[*].repositoryName" --output text)

              
              if [ -n "$REPOSITORIES" ]; then
                for REPO in $REPOSITORIES; do
                  echo "Deleting all images from repository: $REPO"
                  # Get image IDs for all images in the repository
                  IMAGE_IDS=$(aws ecr list-images --repository-name $REPO --query "imageIds[*]" --output json)
                  if [ "$IMAGE_IDS" != "[]" ]; then
                    # Batch delete the images
                    aws ecr batch-delete-image --repository-name $REPO --image-ids "$IMAGE_IDS"
                    echo "Deleted all images from repository: $REPO"
                  else
                    echo "No images to delete in repository: $REPO"
                  fi
                done
              else
                echo "No repositories found. Skipping image deletion."
              fi

              terraform workspace select "${{ matrix.environment }}" || terraform workspace new "${{ matrix.environment }}"

              terraform destroy -auto-approve \
                -input=false \
                -lock=true \
                -var "aws_access_key_id=${AWS_ACCESS_KEY_ID}" \
                -var "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" \
                -var "region=${AWS_REGION}" \
                -var "account_id=${AWS_ACCOUNT_ID}" \
                -var "main_organization=${ORGANIZATION}" \
                -var "environment=${{ matrix.environment }}"
            fi

            cd -  # Return to the previous directory
          done
